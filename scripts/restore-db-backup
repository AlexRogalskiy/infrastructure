#!/bin/bash

set -e -u -x

if [ "$#" != "3" ]; then
  echo "usage: $0 src_instance_id backup_id old_encryption_key" >&2
  exit 1
fi


cd $(dirname $0)/../terraform/production

database=ci
src_instance_id="$1"
backup_id="$2"
old_encryption_key="$3"

output="$(terraform output --json)"

dst_instance_id="$(jq -r '.["'$database'_database_instance_id"].value' <<< $output)"

# connect to the cluster

cluster_name="$(jq -r '.cluster_name.value' <<< $output)"
cluster_zone="$(jq -r '.cluster_zone.value' <<< $output)"
project="$(jq -r '.project.value' <<< $output)"

gcloud container clusters get-credentials "$cluster_name" --zone "$cluster_zone" --project "$project"

# scale down the ATCs to 0
ci_namespace="$(jq -r '.ci_namespace.value' <<< $output)"
ci_release_name="$(jq -r '.ci_concourse_release_name.value' <<< $output)"
ci_deployment_name=${ci_release_name}-web

values="$(helm get values "$ci_release_name" -n "$ci_namespace" -o json)"

kubectl scale deployment "$ci_deployment_name" --replicas 0 -n "$ci_namespace"

# wait for the ATCs to stop

# TODO: timeout
while true; do
  current_replicas="$(kubectl get deployment "$ci_deployment_name" -n "$ci_namespace" -o jsonpath={.status.replicas})"
  if [ -z "$current_replicas" ] || [ "$current_replicas" -eq "0" ]; then
    break
  fi
done

# restore the old database

gcloud sql backups restore "$backup_id" --restore-instance="$dst_instance_id" --backup-instance="$src_instance_id" --quiet

# user and password are also restored from the backup

user="$(jq -r '.secrets.postgresUser' <<< $output)"
password="$(jq -r '.secrets.postgresPassword' <<< $output)"

# the current version of gcloud upserts instead of insert on create

gcloud sql users create "$user" --instance="$dst_instance_id" --password="$password"

# number of ATCs will be scaled back in the reencrypt script

$(dirname $0)/reencrypt-db "$old_encryption_key"
